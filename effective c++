Given that malloc and free are ignorant of constructors and destructors and that mixing malloc/free with
new/delete can be more volatile than a fraternity rush party, you're best off sticking to an exclusive diet of news
and deletes whenever you can.

Given the availability of consts and inlines, your need for the preprocessor is reduced, but it's not completely
eliminated. The day is far from near when you can abandon #include, and #ifdef/#ifndef continue to play
important roles in controlling compilation. It's not yet time to retire the preprocessor, but you should definitely
plan to start giving it longer and more frequent vacations

t's often convenient to define class-specific constants, and that calls for a slightly different tack. To
limit the scope of a constant to a class, you must make it a member, and to ensure there's at most one copy of the
constant, you must make it a static member:

This Item might better be called "prefer the compiler to the preprocessor," because #define is often treated as if
it's not part of the language per se. That's one of its problems. When you do something like this,
#define ASPECT_RATIO 1.653
the symbolic name ASPECT_RATIO may never be seen by compilers; it may be removed by the preprocessor
before the source code ever gets to a compiler. As a result, the name ASPECT_RATIO may not get entered into
the symbol table. This can be confusing if you get an error during compilation involving the use of the constant,
because the error message may refer to 1.653, not ASPECT_RATIO. If ASPECT_RATIO was defined in a
header file you didn't write, you'd then have no idea where that 1.653 came from, and you'd probably waste time
tracking it down. This problem can also crop up in a symbolic debugger, because, again, the name you're
programming with may not be in the symbol table.

This is a particularly important rule to bear in mind when you are writing a class containing a pointer data
member and also offering multiple constructors, because then you've got to be careful to use the same form of
new in all the constructors to initialize the pointer member. If you don't, how will you know what form of delete
to use in your destructor? For a further examination of this issue, s

Finally, X's operator new will do the following:
1. Call the standard set_new_handler with X's error-handling function. This will install X's new-handler asthe global new- handler. In the code below, notice how you explicitly reference the std scope (where the
standard set_new_handler resides) by using the "::" notation.
2. Call the global operator new to actually allocate the requested memory. If the initial attempt at allocation
fails, the global operator new will invoke X's new-handler, because that function was just installed as the
global new-handler. If the global operator new is ultimately unable to find a way to allocate the requested
memory, it will throw a std::bad_alloc exception, which X's operator new will catch. X's operator new
will then restore the global new-handler that was originally in place, and it will return by propagating the
exception.
3. Assuming the global operator new was able to successfully allocate enough memory for an object of type
X, X's operator new will again call the standard set_new_handler to restore the global error-handling
function to what it was originally. It will then return a pointer to the allocated memory

When operator new cannot satisfy a request for memory, it calls the new-handler function not once, but
repeatedly until it can find enough memory. The code giving rise to these repeated calls is shown in Item 8, but
this high-level description is enough to conclude that a well-designed new-handler function must do one of the
following:
 Make more memory available. This may allow operator new's next attempt to allocate the memory to
succeed. One way to implement this strategy is to allocate a large block of memory at program start-up,
then release it the first time the new-handler is invoked. Such a release is often accompanied by some kind
of warning to the user that memory is low and that future requests may fail unless more memory is
somehow made available.
 Install a different new-handler. If the current new-handler can't make any more memory available,
perhaps it knows of a different new-handler that is more resourceful. If so, the current new-handler can
install the other new-handler in its place (by calling set_new_handler). The next time operator new calls
the new-handler function, it will get the one most recently installed. (A variation on this theme is for a
new-handler to modify its own behavior, so the next time it's invoked, it does something different. One
way to achieve this is to have the new-handler modify static or global data that affects the new-handler's
behavior.)
 Deinstall the new-handler, i.e., pass the null pointer to set_new_handler. With no new-handler installed,
operator new will throw an exception of type std::bad_alloc when its attempt to allocate memory is
unsuccessful.
 Throw an exception of type std::bad_alloc or some type derived from std::bad_alloc. Such exceptions
will not be caught by operator new, so they will propagate to the site originating the request for memory.
(Throwing an exception of a different type will violate operator new's exception specification. The default
action when that happens is to call abort, so if your new-handler is going to throw an exception, you
definitely want to make sure it's from the std::bad_alloc hierarchy. For more information on exception
specifications, see Item M14.)
 Not return , typically by calling abort or exit, both of which are found in the standard C library (and thus
in the standard C++ library ? see Item 49).

One of the things many people don't realize about operator new is that it's inherited by subclasses. That can lead
to some interesting complications

Note, by the way, that there’s no way to create a class-specific con-
stant using a #define , because #define s don’t respect scope. Once a
macro is defined, it’s in force for the rest of the compilation (unless it’s
#undef ed somewhere along the line). Which means that not only can’t
#define s be used for class-specific constants, they also can’t be used to
provide any kind of encapsulation, i.e., there is no such thing as a
“private” #define . Of course, const data members can be encapsulated;
NumTurns is
The only exception is when
you need the value of a class constant during compilation of the class,
such as in the declaration of the array GamePlayer::scores above (where
compilers insist on knowing the size of the array during compilation).
===============
enum hack
=========
The enum hack is worth knowing about for several reasons. First, the
enum hack behaves in some ways more like a #define than a const
does, and sometimes that’s what you want. For example, it’s legal to
take the address of a const , but it’s not legal to take the address of an
enum, and it’s typically not legal to take the address of a #define ,
either. If you don’t want to let people get a pointer or reference to one
of your integral constants, an enum is a good way to enforce that con-
straint. (For more on enforcing design constraints through coding
decisions, consult Item 18.) Also, though good compilers won’t set
aside storage for const objects of integral types (unless you create a
pointer or reference to the object), sloppy compilers may, and you may
not be willing to set aside memory for such objects. Like #define s,
enums never result in that kind of unnecessary memory allocation.

=========
constness
=========

Let’s take a brief time-out for philosophy. What does it mean for a
member function to be const ? There are two prevailing notions: bitwise
constness (also known as physical constness) and logical constness.
The bitwise const camp believes that a member function is const if and
only if it doesn’t modify any of the object’s data members (excluding
those that are static), i.e., if it doesn’t modify any of the bits inside the
object. The nice thing about bitwise constness is that it’s easy to
detect violations: compilers just look for assignments to data mem-
bers. In fact, bitwise constness is C++’s definition of constness, and a
const member function isn’t allowed to modify any of the non-static
data members of the object on which it is invoked.
=============
intialization order
===============
One aspect of C++ that isn’t fickle is the order in which an object’s
data is initialized. This order is always the same: base classes are ini-
tialized before derived classes (see also Item 12), and within a class,
data members are initialized in the order in which they are declared.
This is true
even if they are listed in a different order on the member initialization
list (something that’s unfortunately legal)

the relative order of initialization of non-local static
objects defined in different translation units is undefined. There is a
reason for this. Determining the “proper” order in which to initialize
non-local static objects is hard. Very hard. Unsolvably hard. In its
most general form — with multiple translation units and non-local
static objects generated through implicit template instantiations
(which may themselves arise via implicit template instantiations)
======
item 4
=======
Things to Remember
✦ Manually initialize objects of built-in type, because C++ only some-
times initializes them itself.
✦ In a constructor, prefer use of the member initialization list to as-
signment inside the body of the constructor. List data members in
the initialization list in the same order they’re declared in the class.
✦ Avoid initialization order problems across translation units by re-
placing non-local static objects with local static objects.
